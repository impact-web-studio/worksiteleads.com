---
// MobileMenu.astro
import Button from '../buttons/Button.astro';

interface NavLink {
	name: string;
	href?: string;
	childrenLinks?: NavLink[];
}

interface Props {
	navLinks: NavLink[];
	isOverlay?: boolean;
	id?: string;
}

const { navLinks, isOverlay = false, id = 'mobile-menu' } = Astro.props;

const menuClasses = [
	'hidden',
	'lg:hidden',
	'fixed',
	'top-0',
	'left-0',
	'w-full',
	'h-full',
	'z-40', // Lower than header's z-50
	isOverlay ? 'bg-black/95' : 'bg-white',
].join(' ');

const linkClasses = [
	'block',
	'px-4',
	'py-3',
	'wsl-text-base',
	'font-medium',
	'capitalize',
	'transition-colors',
	'duration-200',
	'border-b',
	isOverlay
		? 'text-gray-200 hover:text-primary-500 '
		: 'text-gray-700 hover:text-primary-500',
].join(' ');

const subLinkClasses = [
	'block',
	'px-8',
	'py-2',
	'text-sm',
	'capitalize',
	'transition-colors',
	'duration-200',
	'border-b',
	'focus:outline-none',
	isOverlay
		? 'text-gray-200 hover:text-primary-500 hover:bg-white/5 border-white/10 '
		: 'text-gray-600 hover:text-primary-500 hover:bg-gray-50 border-gray-100 ',
].join(' ');
---

<div
	class={menuClasses}
	id={id}
	role="dialog"
	aria-modal="true"
	aria-hidden="true"
	aria-labelledby="mobile-menu-label"
>
	<!-- Header spacer to push content below the header -->
	<div class="h-20 sm:h-24 lg:h-28"></div>

	<!-- Scrollable content area -->
	<div class="flex flex-col justify-between overflow-y-auto px-4 pb-8">
		<!-- Screen reader label -->
		<h2
			id="mobile-menu-label"
			class="sr-only"
		>
			Mobile navigation menu
		</h2>

		<!-- Navigation Links -->
		<nav
			role="navigation"
			aria-label="Mobile navigation"
			class="pt-6"
		>
			{
				navLinks.map((link) => (
					<div class="mobile-nav-item">
						{link.childrenLinks ? (
							<div>
								<span
									class={`${linkClasses} flex items-center justify-between w-full`}
									aria-expanded="false"
									data-submenu-toggle
									aria-controls={`submenu-${link.name
										.toLowerCase()
										.replace(/\s+/g, '-')}`}
								>
									{link.name}
									<svg
										class="w-5 h-5 transition-transform duration-200"
										fill="none"
										stroke="currentColor"
										viewBox="0 0 24 24"
										aria-hidden="true"
									>
										<path
											stroke-linecap="round"
											stroke-linejoin="round"
											stroke-width="2"
											d="M19 9l-7 7-7-7"
										/>
									</svg>
								</span>
								<div
									class="submenu hidden"
									id={`submenu-${link.name.toLowerCase().replace(/\s+/g, '-')}`}
									role="region"
									aria-labelledby={`submenu-${link.name
										.toLowerCase()
										.replace(/\s+/g, '-')}-label`}
								>
									<h3
										id={`submenu-${link.name
											.toLowerCase()
											.replace(/\s+/g, '-')}-label`}
										class="sr-only"
									>
										{link.name} submenu
									</h3>
									{link.childrenLinks.map((childLink) => (
										<a
											href={childLink.href}
											class={subLinkClasses}
											aria-current={
												childLink.href === Astro.url.pathname
													? 'page'
													: undefined
											}
										>
											{childLink.name}
										</a>
									))}
								</div>
							</div>
						) : (
							<a
								href={link.href}
								class={linkClasses}
								aria-current={
									link.href === Astro.url.pathname ? 'page' : undefined
								}
							>
								{link.name}
							</a>
						)}
					</div>
				))
			}
		</nav>

		<!-- Mobile CTA Buttons -->
		<div
			class="flex flex-col"
			style={`border-color: ${
				isOverlay ? 'rgba(255,255,255,0.2)' : 'rgb(229,231,235)'
			}`}
		>
			<Button
				text="Contact"
				type="link"
				href="/contact"
				class={`py-3 px-4 font-semibold transition-colors duration-200 ${
					isOverlay
						? 'text-gray-200 hover:text-primary-500 hover:bg-white/10'
						: 'text-gray-700 hover:text-primary-500 hover:bg-gray-50'
				}`}
			/>
			<Button
				text="Schedule a Call"
				href="/schedule-call"
				class="w-full text-center"
			/>
		</div>
	</div>
</div>

<script>
	// Handle submenu toggles
	document.addEventListener('click', (e: Event) => {
		const target = e.target as Element;
		const toggle = target.closest('[data-submenu-toggle]') as HTMLButtonElement;
		if (!toggle) return;

		e.preventDefault();

		const submenu = toggle.parentElement?.querySelector(
			'.submenu'
		) as HTMLElement;
		const icon = toggle.querySelector('svg');
		const isExpanded = toggle.getAttribute('aria-expanded') === 'true';

		if (submenu && icon) {
			if (isExpanded) {
				submenu.classList.add('hidden');
				icon.classList.remove('rotate-180');
				toggle.setAttribute('aria-expanded', 'false');
			} else {
				submenu.classList.remove('hidden');
				icon.classList.add('rotate-180');
				toggle.setAttribute('aria-expanded', 'true');
			}
		}
	});
</script>

<style>
	/* Mobile menu slide animation */
	#mobile-menu {
		transform: translateY(-100%);
		transition: transform 0.5s ease-in-out;
	}

	#mobile-menu.menu-open {
		transform: translateY(0);
	}

	#mobile-menu.menu-closing {
		transform: translateY(-100%);
	}

	/* Ensure menu is visible when not hidden */
	#mobile-menu:not(.hidden) {
		display: block;
	}

	/* Active page indicator */
	a[aria-current='page'] {
		color: var(--color-primary-500) !important;
		font-weight: 600;
	}

	/* Submenu animation */
	.submenu {
		max-height: 0;
		overflow: hidden;
		transition: max-height 0.3s ease-out;
	}

	.submenu:not(.hidden) {
		max-height: 500px;
	}

	/* Icon rotation */
	.rotate-180 {
		transform: rotate(180deg);
	}
</style>
