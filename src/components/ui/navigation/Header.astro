---
// Header.astro
import Logo from '@/components/ui/media/LogoImage.astro';
import Button from '../buttons/Button.astro';
import Navigation from './Navigation.astro';
import MobileMenu from './MobileMenu.astro';

interface Props {
	isOverlay?: boolean;
}

const navLinks = [
	{
		name: 'home',
		href: '/',
	},
	{
		name: 'services',
		childrenLinks: [
			{
				name: 'Website Development',
				href: '/web-development',
			},
			{
				name: 'AI Automation',
				href: '/ai-automation',
			},
			{
				name: 'Digital Marketing',
				href: '/digital-marketing',
			},
		],
	},
	{
		name: 'Who We Help',
		href: '/who-we-help',
	},
];

const { isOverlay = false } = Astro.props;

// Generate consistent CSS classes
const headerClasses = [
	'w-full',
	'z-50',
	'transition-all',
	'duration-300',
	isOverlay
		? 'absolute top-0 left-0 bg-transparent backdrop-blur-sm'
		: 'relative bg-gray-700 text-gray-100 shadow-sm',
].join(' ');

const mobileButtonClasses = [
	'mobile-menu-toggle',
	'lg:hidden',
	'p-2',
	'rounded-md',
	'transition-colors',
	'duration-200',
	'focus:outline-none',
	'focus:ring-2',
	'focus:ring-offset-2',
	isOverlay
		? 'text-white hover:text-gray-200 hover:bg-white/10 focus:ring-white/20'
		: 'text-gray-700 hover:text-gray-900 hover:bg-gray-100 focus:ring-gray-500',
].join(' ');
---

<header
	class={headerClasses}
	data-overlay={isOverlay}
>
	<div class="max-w-7xl mx-auto px-4 py-2 sm:px-6 lg:px-8 lg:py-8">
		<div class="flex justify-between items-center py-4">
			<!-- Logo -->
			<Logo
				size="md"
				href="/"
				context="header"
				priority={true}
				loading="eager"
				className={isOverlay ? '' : ''}
			/>

			<!-- Desktop Navigation -->
			<Navigation
				navLinks={navLinks}
				isOverlay={isOverlay}
				class="hidden lg:flex lg:items-center lg:justify-center"
			/>

			<!-- Desktop CTA Buttons -->
			<div class="hidden lg:flex lg:items-center lg:justify-center lg:gap-8">
				<Button
					text="Contact"
					type="link"
					linkColor="text-gray-200"
					href="/contact"
					class="wsl-text-lg font-semibold capitalize hover:text-primary-500"
				/>
				<Button
					text="Schedule a Call"
					href="/schedule-call"
					class="button secondary"
				/>
			</div>

			<!-- Mobile Menu Toggle Button -->
			<button
				class={mobileButtonClasses}
				aria-label="Toggle navigation menu"
				aria-expanded="false"
				aria-controls="mobile-menu"
				data-mobile-toggle
			>
				<div class="relative w-6 h-6">
					<!-- Hamburger Icon -->
					<svg
						class="w-6 h-6 hamburger-icon transition-all duration-300 ease-in-out"
						fill="none"
						stroke="currentColor"
						viewBox="0 0 24 24"
						aria-hidden="true"
					>
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M4 6h16M4 12h16M4 18h16"
						></path>
					</svg>
					<!-- Close Icon -->
					<svg
						class="w-6 h-6 close-icon absolute top-0 left-0 transition-all duration-300 ease-in-out opacity-0 rotate-90"
						fill="none"
						stroke="currentColor"
						viewBox="0 0 24 24"
						aria-hidden="true"
					>
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M6 18L18 6M6 6l12 12"
						></path>
					</svg>
				</div>
			</button>
		</div>
	</div>
</header>

<!-- Mobile Menu moved outside header -->
<MobileMenu
	navLinks={navLinks}
	isOverlay={isOverlay}
	id="mobile-menu"
/>

<script>
	class MobileMenuController {
		private toggle: HTMLButtonElement | null;
		private menu: HTMLElement | null;
		private hamburgerIcon: Element | null;
		private closeIcon: Element | null;
		private isOpen: boolean = false;
		private boundToggleMenu: () => void;
		private boundHandleOutsideClick: (e: Event) => void;
		private boundHandleEscape: (e: KeyboardEvent) => void;
		private boundHandleResize: () => void;

		constructor() {
			// Bind methods to preserve 'this' context
			this.boundToggleMenu = () => this.toggleMenu();
			this.boundHandleOutsideClick = (e: Event) => this.handleOutsideClick(e);
			this.boundHandleEscape = (e: KeyboardEvent) => this.handleEscape(e);
			this.boundHandleResize = () => this.handleResize();

			this.init();
		}

		private init(): void {
			// Find elements
			this.toggle = document.querySelector(
				'[data-mobile-toggle]'
			) as HTMLButtonElement;
			this.menu = document.getElementById('mobile-menu');
			this.hamburgerIcon = this.toggle?.querySelector('.hamburger-icon');
			this.closeIcon = this.toggle?.querySelector('.close-icon');

			if (!this.toggle || !this.menu) {
				console.warn('Mobile menu elements not found');
				return;
			}

			// Add event listeners
			this.toggle.addEventListener('click', this.boundToggleMenu);
			document.addEventListener('click', this.boundHandleOutsideClick);
			document.addEventListener('keydown', this.boundHandleEscape);
			window.addEventListener('resize', this.boundHandleResize);
		}

		private handleOutsideClick(e: Event): void {
			const target = e.target as Node;
			if (
				this.isOpen &&
				this.menu &&
				this.toggle &&
				!this.menu.contains(target) &&
				!this.toggle.contains(target)
			) {
				this.closeMenu();
			}
		}

		private handleEscape(e: KeyboardEvent): void {
			if (e.key === 'Escape' && this.isOpen) {
				this.closeMenu();
			}
		}

		private handleResize(): void {
			if (window.innerWidth >= 1024 && this.isOpen) {
				this.closeMenu();
			}
		}

		private toggleMenu(): void {
			this.isOpen ? this.closeMenu() : this.openMenu();
		}

		private openMenu(): void {
			if (!this.menu || !this.toggle || !this.hamburgerIcon || !this.closeIcon)
				return;

			this.isOpen = true;
			this.menu.setAttribute('aria-hidden', 'false');
			this.toggle.setAttribute('aria-expanded', 'true');

			// Show menu and trigger slide animation
			this.menu.classList.remove('hidden');
			this.menu.classList.remove('menu-closing');

			// Force reflow to ensure the menu is rendered before animation
			this.menu.offsetHeight;

			// Start slide animation
			this.menu.classList.add('menu-open');

			// Animate hamburger to close icon
			this.hamburgerIcon.classList.add('opacity-0', '-rotate-90');
			this.closeIcon.classList.remove('opacity-0', 'rotate-90');
			this.closeIcon.classList.add('opacity-100', 'rotate-0');

			document.body.classList.add('overflow-hidden');
		}

		private closeMenu(): void {
			if (!this.menu || !this.toggle || !this.hamburgerIcon || !this.closeIcon)
				return;

			this.isOpen = false;
			this.menu.setAttribute('aria-hidden', 'true');
			this.toggle.setAttribute('aria-expanded', 'false');

			// Start slide out animation
			this.menu.classList.remove('menu-open');
			this.menu.classList.add('menu-closing');

			// Animate close icon back to hamburger
			this.closeIcon.classList.add('opacity-0', 'rotate-90');
			this.closeIcon.classList.remove('opacity-100', 'rotate-0');
			this.hamburgerIcon.classList.remove('opacity-0', '-rotate-90');

			document.body.classList.remove('overflow-hidden');

			// Hide menu after animation completes
			setTimeout(() => {
				if (!this.isOpen && this.menu) {
					this.menu.classList.add('hidden');
					this.menu.classList.remove('menu-closing');
				}
			}, 300); // Match animation duration
		}

		// Clean up event listeners
		public destroy(): void {
			if (this.toggle) {
				this.toggle.removeEventListener('click', this.boundToggleMenu);
			}
			document.removeEventListener('click', this.boundHandleOutsideClick);
			document.removeEventListener('keydown', this.boundHandleEscape);
			window.removeEventListener('resize', this.boundHandleResize);
		}
	}

	// Global reference to the current controller instance
	let currentController: MobileMenuController | null = null;

	function initMobileMenu(): void {
		console.log('Initializing mobile menu controller');

		// Clean up previous instance if it exists
		if (currentController) {
			currentController.destroy();
		}

		// Create new instance
		currentController = new MobileMenuController();
	}

	// Initialize on first load
	document.addEventListener('DOMContentLoaded', initMobileMenu);

	// Re-initialize on every view transition
	document.addEventListener('astro:page-load', initMobileMenu);

	// Clean up before navigation
	document.addEventListener('astro:before-preparation', () => {
		if (currentController) {
			currentController.destroy();
			currentController = null;
		}
	});
</script>

<style>
	/* Header overlay effects */
	header[data-overlay='true'] {
		background: linear-gradient(
			180deg,
			rgba(0, 0, 0, 0.3) 0%,
			rgba(0, 0, 0, 0.1) 50%,
			transparent 100%
		);
	}

	/* Smooth scrolling offset for fixed header */
	@media (min-width: 768px) {
		header[data-overlay='true'] + main {
			scroll-margin-top: 80px;
		}
	}

	/* Mobile menu slide animations */
	@keyframes slideDown {
		from {
			transform: translateY(-100%);
		}
		to {
			transform: translateY(0);
		}
	}

	@keyframes slideUp {
		from {
			transform: translateY(0);
		}
		to {
			transform: translateY(-100%);
		}
	}

	/* Mobile menu icon animations */
	.hamburger-icon,
	.close-icon {
		transition:
			opacity 0.3s ease-in-out,
			transform 0.3s ease-in-out;
	}

	/* Focus management for accessibility */
	.mobile-menu-toggle:focus {
		outline: none;
	}
</style>
