---
// ScrollReveal.astro
interface Props {
	animation?: 'fade' | 'slideUp' | 'slideDown' | 'slideLeft' | 'slideRight';
	delay?: number;
	duration?: string;
	threshold?: 'quarter' | 'half' | 'full' | number;
	once?: boolean;
	stagger?: boolean;
	class?: string;
}

const {
	animation = 'slideUp',
	delay = 0,
	duration = 'duration-700',
	threshold = 'quarter',
	once = true,
	stagger = false,
	class: className = '',
} = Astro.props;

const baseClasses = 'transition-all ease-out';
const hiddenClasses = {
	fade: 'opacity-0',
	slideUp: 'opacity-0 translate-y-8',
	slideDown: 'opacity-0 -translate-y-8',
	slideLeft: 'opacity-0 translate-x-8',
	slideRight: 'opacity-0 -translate-x-8',
};

const visibleClasses = {
	fade: 'opacity-100',
	slideUp: 'opacity-100 translate-y-0',
	slideDown: 'opacity-100 translate-y-0',
	slideLeft: 'opacity-100 translate-x-0',
	slideRight: 'opacity-100 translate-x-0',
};

// Convert threshold to class names for easier CSS targeting
const thresholdClass =
	typeof threshold === 'number' ? '' : `reveal-${threshold}`;
const onceClass = once ? 'reveal-once' : '';
const staggerClass = stagger ? 'reveal-stagger' : 'reveal-no-stagger';
---

<div
	class={`scroll-reveal ${baseClasses} ${duration} ${hiddenClasses[animation]} ${thresholdClass} ${onceClass} ${staggerClass} ${className}`}
	data-animation={animation}
	data-delay={delay}
	data-threshold={threshold}
	data-once={once}
	data-stagger={stagger}
	no-reveal
>
	<slot />
</div>

<script>
	class ScrollRevealManager {
		private observer: IntersectionObserver | null = null;
		private delayBetweenAnimations = 100;
		private staggerGroupCounters = new Map<Element, number>();

		start() {
			const elements = Array.from(document.querySelectorAll('.scroll-reveal'));

			if (elements.length === 0) return;

			// Set up each element
			elements.forEach((el) => {
				const element = el as HTMLElement;
				element.setAttribute('no-reveal', '');
				element._intersectionThreshold = this.getThreshold(element);
			});

			const callback = (entries: IntersectionObserverEntry[]) => {
				entries.forEach((entry) => {
					requestAnimationFrame(() => {
						const target = entry.target as HTMLElement;
						const intersectionRatio = entry.intersectionRatio;
						const threshold = target._intersectionThreshold;
						const isStagger = target.dataset.stagger === 'true';
						const isOnce = target.dataset.once === 'true';

						if (!isStagger) {
							// Non-staggered animation (immediate)
							if (entry.isIntersecting) {
								target.removeAttribute('no-reveal');
								this.animateElement(target);
								if (isOnce) {
									this.observer?.unobserve(target);
								}
							} else if (!isOnce) {
								target.setAttribute('no-reveal', '');
								this.resetElement(target);
							}
						} else {
							// Staggered animation
							if (intersectionRatio >= threshold) {
								if (!target.hasAttribute('data-animated')) {
									target.removeAttribute('no-reveal');
									target.setAttribute('data-animated', 'true');

									const staggerGroup = this.findStaggerGroup(target);
									const staggerIndex = this.getStaggerIndex(
										target,
										staggerGroup
									);

									const baseDelay = parseInt(target.dataset.delay || '0');
									const staggerDelay =
										staggerIndex * this.delayBetweenAnimations;
									const totalDelay = baseDelay + staggerDelay;

									setTimeout(() => {
										this.animateElement(target);
									}, totalDelay);

									if (isOnce) {
										this.observer?.unobserve(target);
									}
								}
							} else if (!isOnce) {
								target.setAttribute('no-reveal', '');
								target.removeAttribute('data-animated');
								this.resetElement(target);

								// Reset stagger group counter when elements go out of view
								const staggerGroup = this.findStaggerGroup(target);
								this.staggerGroupCounters.set(staggerGroup, 0);
							}
						}
					});
				});
			};

			this.observer = new IntersectionObserver(callback, {
				threshold: [0, 0.25, 0.5, 0.99],
				rootMargin: '0px 0px -50px 0px',
			});

			elements.forEach((el) => {
				this.observer?.observe(el);
			});
		}

		private findStaggerGroup(element: HTMLElement): Element {
			// Look for the closest parent with data-reveal-group attribute
			let current = element.parentElement;
			while (current) {
				if (current.hasAttribute('data-reveal-group')) {
					return current;
				}
				current = current.parentElement;
			}
			// If no data-reveal-group found, use the document body as fallback
			return document.body;
		}

		private getStaggerIndex(
			element: HTMLElement,
			staggerGroup: Element
		): number {
			// Get all staggered elements within this group
			const staggeredElements = Array.from(
				staggerGroup.querySelectorAll('[data-stagger="true"]')
			);

			// Find the index of the current element
			const index = staggeredElements.indexOf(element);
			return index >= 0 ? index : 0;
		}

		private getThreshold(element: HTMLElement): number {
			const thresholdAttr = element.dataset.threshold;

			if (typeof thresholdAttr === 'string') {
				switch (thresholdAttr) {
					case 'full':
						return 0.99;
					case 'half':
						return 0.5;
					case 'quarter':
						return 0.25;
					default:
						return 0.1;
				}
			}

			return parseFloat(thresholdAttr || '0.1');
		}

		private animateElement(element: HTMLElement) {
			const animation = element.dataset.animation || 'fade';
			const baseDelay = parseInt(element.dataset.delay || '0');
			const isStagger = element.dataset.stagger === 'true';

			if (!isStagger) {
				setTimeout(() => {
					this.applyVisibleClasses(element, animation);
				}, baseDelay);
			} else {
				this.applyVisibleClasses(element, animation);
			}
		}

		private applyVisibleClasses(element: HTMLElement, animation: string) {
			switch (animation) {
				case 'fade':
					element.classList.remove('opacity-0');
					element.classList.add('opacity-100');
					break;
				case 'slideUp':
					element.classList.remove('opacity-0', 'translate-y-8');
					element.classList.add('opacity-100', 'translate-y-0');
					break;
				case 'slideDown':
					element.classList.remove('opacity-0', '-translate-y-8');
					element.classList.add('opacity-100', 'translate-y-0');
					break;
				case 'slideLeft':
					element.classList.remove('opacity-0', 'translate-x-8');
					element.classList.add('opacity-100', 'translate-x-0');
					break;
				case 'slideRight':
					element.classList.remove('opacity-0', '-translate-x-8');
					element.classList.add('opacity-100', 'translate-x-0');
					break;
			}
		}

		private resetElement(element: HTMLElement) {
			const animation = element.dataset.animation || 'fade';

			switch (animation) {
				case 'fade':
					element.classList.remove('opacity-100');
					element.classList.add('opacity-0');
					break;
				case 'slideUp':
					element.classList.remove('opacity-100', 'translate-y-0');
					element.classList.add('opacity-0', 'translate-y-8');
					break;
				case 'slideDown':
					element.classList.remove('opacity-100', 'translate-y-0');
					element.classList.add('opacity-0', '-translate-y-8');
					break;
				case 'slideLeft':
					element.classList.remove('opacity-100', 'translate-x-0');
					element.classList.add('opacity-0', 'translate-x-8');
					break;
				case 'slideRight':
					element.classList.remove('opacity-100', 'translate-x-0');
					element.classList.add('opacity-0', '-translate-x-8');
					break;
			}
		}

		destroy() {
			if (this.observer) {
				this.observer.disconnect();
				this.observer = null;
			}
			this.staggerGroupCounters.clear();
		}
	}

	// Extend HTMLElement to include custom properties
	declare global {
		interface HTMLElement {
			_intersectionThreshold: number;
		}
	}

	let scrollRevealManager: ScrollRevealManager;

	function initScrollReveal() {
		if (scrollRevealManager) {
			scrollRevealManager.destroy();
		}
		scrollRevealManager = new ScrollRevealManager();
		scrollRevealManager.start();
	}

	// Initialize on page load
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', initScrollReveal);
	} else {
		initScrollReveal();
	}

	// Re-initialize on Astro page transitions
	document.addEventListener('astro:after-swap', () => {
		initScrollReveal();
	});
</script>
