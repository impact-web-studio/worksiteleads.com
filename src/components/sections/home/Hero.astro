---
import ScrollReveal from '@/components/sections/shared/ScrollReveal.astro';
import VideoEmbed from '@/components/ui/media/VideoEmbed.astro';
import { Image } from 'astro:assets';
import heroBg from '@/assets/home-banner-bg.png';
import Pill from '@/components/ui/pills/Pill.astro';
import Button from '@/components/ui/buttons/Button.astro';

interface Props {
	title?: string;
	subtitle?: string;
	bodyText?: string;
	listItems?: string[];
	videoId?: string;
	ctaText?: string;
	ctaHref?: string;
	learnMoreHref?: string | undefined;
}

const {
	title = 'Welcome to Our Company',
	subtitle = 'We create amazing experiences that drive results',
	bodyText,
	listItems = [
		'Full Website Designs',
		'Lead Generation & Follow-up Automations',
		'No Technical Skills or Marketing Experience Needed',
	],
	videoId = 'dQw4w9WgXcQ',
	learnMoreHref,
} = Astro.props;
---

<section class="relative overflow-hidden">
	<!-- Background Image -->
	<div class="absolute inset-0 z-0">
		<Image
			src={heroBg}
			alt=""
			class="w-full h-full object-fill object-top min-h-full lg:w-full"
			loading="eager"
			fetchpriority="high"
			format="webp"
			quality={90}
			densities={[1, 2]}
		/>
		<!-- Overlay -->
		<div class="absolute inset-0"></div>
	</div>

	<!-- Content Container -->
	<div
		class="content-container relative z-10 min-h-screen"
		data-reveal-group
	>
		<!-- Main Content Area -->
		<div class="flex flex-col gap-5 pt-32">
			<div class="flex flex-col gap-5 text-center">
				<!-- Main Heading -->
				<ScrollReveal
					animation="slideUp"
					stagger={true}
				>
					<h1
						class="heading-l1 text-white font-montserrat"
						set:html={title}
					/>
				</ScrollReveal>

				<!-- Subtitle -->
				<ScrollReveal
					animation="slideUp"
					stagger={true}
				>
					<h2
						class="hero-subtitle text-primary-500 font-montserrat"
						set:html={subtitle}
					/>
				</ScrollReveal>
			</div>
			<!-- Decorative List Items -->
			<ScrollReveal stagger={true}>
				<div class="flex flex-wrap sm:justify-center gap-4">
					{listItems.map((item) => <Pill text={item} />)}
				</div>
			</ScrollReveal>

			<!-- CTA Button -->
			<ScrollReveal stagger={true}>
				<div class="pt-8 flex gap-3 items-center justify-center">
					<Button
						text="Schedule a Call"
						href="/"
						variation="primary"
					/>
					<Button
						id="hero-learn-more-button"
						href={learnMoreHref || '#video-section'}
						variation="primary"
						type="link"
						text="Learn More"
					/>
				</div>
			</ScrollReveal>
		</div>

		<!-- Video Section - Positioned to hang off background -->
		<ScrollReveal stagger={true}>
			<div class="relative z-20 px-4 sm:px-6 lg:px-8 pb-20">
				<div class="mx-auto">
					<div
						id="video-section"
						class="relative bg-black rounded-2xl shadow-2xl overflow-hidden transform translate-y-16"
					>
						<!-- Video Embed -->
						<VideoEmbed
							videoSrc="/videos/wsl_website_vsl.mp4"
							posterSrc="/worksiteleads.png"
							data-video-container
						/>
					</div>
				</div>
			</div>
		</ScrollReveal>
	</div>
</section>

<script>
	function attachLearnMoreListener() {
		const learnMoreButton = document.getElementById('hero-learn-more-button');
		const videoSection = document.getElementById('video-section');
		const video = document.querySelector('[data-video-player]');

		if (!learnMoreButton || !videoSection || !video) {
			console.warn('Learn More button or video elements not found:', {
				learnMoreButton: !!learnMoreButton,
				videoSection: !!videoSection,
				video: !!video,
			});
			return;
		}

		// Remove existing listeners to prevent duplicates
		const newButton = learnMoreButton.cloneNode(true);
		learnMoreButton.replaceWith(newButton);

		newButton.addEventListener('click', function (event) {
			event.preventDefault(); // Prevent default link behavior

			// Smooth scroll to video section
			videoSection.scrollIntoView({
				behavior: 'smooth',
				block: 'start',
			});

			// Play video and hide overlay
			video.muted = false;
			video
				.play()
				.then(() => {
					const overlay = video.parentElement?.querySelector(
						'[data-video-overlay]'
					);
					if (overlay) {
						overlay.style.opacity = '0';
						overlay.style.pointerEvents = 'none';
					}
				})
				.catch((error) => {
					console.error('Video playback failed:', error);
				});
		});
	}

	// Attach listener on initial load and View Transitions
	document.addEventListener('DOMContentLoaded', attachLearnMoreListener);
	document.addEventListener('astro:page-load', attachLearnMoreListener);
</script>
